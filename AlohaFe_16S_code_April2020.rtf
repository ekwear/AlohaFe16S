{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;\cssrgb\c0\c0\c0;
\csgray\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \CocoaLigature0 1) ASV generation from demultiplexed fastqs, using DADA2 on a server and the Silva v138 database\
\
library(dada2); packageVersion("dada2")\
setwd("~/AlohaFE")\
path <- "~/AlohaFE"\
forward_reads <- sort(list.files(path,pattern="_R1_001.fastq",full.names=TRUE))\
reverse_reads <- sort(list.files(path,pattern="_R2_001.fastq",full.names=TRUE))\
sample.names <- sapply(strsplit(basename(forward_reads), "_"), `[`, 1)\
pdf("~/AlohaFE/read1_quality.pdf")\
plotQualityProfile(forward_reads[1:6])\
dev.off()\
pdf("~/AlohaFE/read2_quality.pdf")\
plotQualityProfile(reverse_reads[1:6])\
dev.off()\
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))\
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))\
names(filtFs) <- sample.names\
names(filtRs) <- sample.names\
filtered_out <- filterAndTrim(forward_reads, filtFs, reverse_reads, filtRs, truncLen=c(245,160),maxN=0, maxEE=c(2,5), truncQ=8, rm.phix=TRUE, compress=TRUE,multithread=TRUE)\
write.table(filtered_out, "filtered_out.txt")\
errF <- learnErrors(filtFs, nbases=2e+08, multithread=TRUE)\
errR <- learnErrors(filtRs, nbases=2e+08, multithread=TRUE)\
pdf("~/AlohaFE/errF.pdf")\
plotErrors(errF, nominalQ=TRUE)\
dev.off()\
derep_forward <- derepFastq(filtFs, verbose=TRUE)\
names(derep_forward) <- sample.names\
derep_reverse <- derepFastq(filtRs, verbose=TRUE)\
names(derep_reverse) <- sample.names\
dada_forward <- dada(derep_forward, err=errF, pool=TRUE)\
dada_reverse <- dada(derep_reverse, err=errR, pool=TRUE)\
merged_amplicons <- mergePairs(dada_forward, derep_forward, dada_reverse, derep_reverse, verbose=TRUE)\
\pard\pardeftab560\slleading20\partightenfactor0
\cf4 \cb5 \CocoaLigature1 head(merged_amplicons)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \cb3 \CocoaLigature0 seqtab <- makeSequenceTable(merged_amplicons)\
class(seqtab)\
dim(seqtab)\
seqtab.nochim <- removeBimeraDenovo(seqtab, verbose=T)\
sum(seqtab.nochim)/sum(seqtab)\
getN <- function(x) sum(getUniques(x))\
track <- cbind(filtered_out, sapply(dada_forward, getN), sapply(dada_reverse, getN), sapply(merged_amplicons, getN), rowSums(seqtab.nochim))\
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")\
rownames(track) <- sample.names\
head(track)\
write.table(track, "track_seqnumbers.tsv",sep="\\t")\
taxa <- assignTaxonomy(seqtab.nochim, "~/AlohaFE/silva_nr_v138_train_set.fa.gz", tryRC=T) \
taxa.plus <- addSpecies(taxa,"~/AlohaFE/silva_species_assignment_v138.fa.gz", verbose=TRUE) \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 unname(taxa.plus)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 asv_headers <- vector(dim(seqtab.nochim)[2], mode="character")\
for (i in 1:dim(seqtab.nochim)[2]) \{\
 asv_headers[i] <- paste(">ASV", i, sep="_")\
 \}\
asv_seqs <- colnames(seqtab.nochim)\
asv_fasta <- c(rbind(asv_headers, asv_seqs))\
write.table(asv_fasta, "AlohaFE_ASV_April20.fasta", sep="\\t",quote=F, col.names=NA)\
asv_tab <- t(seqtab.nochim)\
row.names(asv_tab) <- sub(">", "", asv_headers)\
write.table(asv_tab,"AlohaFE_asv_counts_April20.tsv",sep="\\t", quote=F, col.names=NA) \
asv_tax <- taxa.plus\
row.names(asv_tax) <- sub(">", "", asv_headers)\
write.table(asv_tax,"AlohaFE_ASVs_tax_April20.tsv", sep="\\t", quote=F, col.names=NA)\
\
2) Manually remove sequences classified as eukaryotes, plastids, and mitochondria by sorting in Excel\
\
3) Subsample each sample to 20,000 sequences using vegan in RStudio\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb1 \CocoaLigature1 library("vegan")\
setwd("~/Desktop/vegan")\
unnorm <- read.table("~/Desktop/vegan/alohaFe_dada2_Apr20_unnorm.csv", sep=",", header=TRUE, row.names=1)\
View(unnorm)\
norm <- matrix(nrow=24,ncol=3881)\
norm <- rrarefy(unnorm,20000)\
View(norm)\
write.table(norm,"~/Desktop/vegan/AlohaFE_norm_Apr20_20k.csv", sep=",")\cf2 \cb3 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\
4) Manually remove ASVs that no longer contain sequences and calculate relative abundances in Excel\
\
5) Remove row numbers from fasta\
\
6) Align fasta using DECIPHER in RStudio\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb1 \CocoaLigature1 library(DECIPHER)\
fasta <- "~/Desktop/vegan/AlohaFE_ASV_April20_fasta_clean.txt"\
dna <- readDNAStringSet(fasta)\
dna\
aligned_DNA <- AlignSeqs(dna)\
aligned_DNA\
writeXStringSet(aligned_DNA, file="~/Desktop/vegan/AlohaFe_Apr20_aligned_fasta.txt")\
\
7) Build a phylogenetic tree using aligned sequences in phangorn on a server, then calculate weighted UniFrac distance using the tree and subsampled relative abundances from step #4\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \cb3 \CocoaLigature0 setwd("~/AlohaFE/")\
library(phangorn)\
file="~/AlohaFE/AlohaFe_Apr20_aligned_fasta.txt"\
data = read.phyDat(file, format="fasta", type="DNA")\
matrix <- dist.ml(data)\
treeUPGMA <- upgma(matrix)\
pdf("~/AlohaFE/tree.pdf")\
plot(treeUPGMA, main="UPGMA")\
dev.off()\
OTUtab <- read.table("~/AlohaFE/AlohaFe_Apr20_relabund.csv", sep=",", header=TRUE, row.names=1)\
library(phyloseq)\
OTU = otu_table(OTUtab, taxa_are_rows=TRUE)\
physeq = phyloseq(OTU, treeUPGMA)\
physeq\
UniFrac(physeq, weighted=TRUE, normalized=TRUE, parallel=FALSE, fast=TRUE)\
}